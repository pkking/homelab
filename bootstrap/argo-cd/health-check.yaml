# This file is a Kustomize patch for the argocd-cm ConfigMap.
# It is not intended to be applied directly with kubectl.
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app.kubernetes.io/name: argocd-cm
    app.kubernetes.io/part-of: argocd
  name: argocd-cm
data:
  resource.customizations: | 
    operators.coreos.com/Subscription:
      -- from: https://github.com/argoproj/argo-cd/tree/c93924b3ccabdf769510db58b7684e3dc8a2d20c/resource_customizations/operators.coreos.com/Subscription
      health.lua: |
        local health_status = {}
        if obj.status ~= nil then
          if obj.status.conditions ~= nil then
            local numDegraded = 0
            local numPending = 0
            local msg = ""
            for i, condition in pairs(obj.status.conditions) do
              msg = msg .. i .. ": " .. condition.type .. " | " .. condition.status .. "\n"
              if condition.type == "InstallPlanPending" and condition.status == "True" then
                numPending = numPending + 1
              elseif (condition.type == "InstallPlanMissing" and condition.reason ~= "ReferencedInstallPlanNotFound") then
                numDegraded = numDegraded + 1
              elseif (condition.type == "CatalogSourcesUnhealthy" or condition.type == "InstallPlanFailed" or condition.type == "ResolutionFailed") and condition.status == "True" then
                numDegraded = numDegraded + 1
              end
            end

            -- Available states: undef/nil, UpgradeAvailable, UpgradePending, UpgradeFailed, AtLatestKnown
            -- Source: https://github.com/openshift/operator-framework-olm/blob/5e2c73b7663d0122c9dc3e59ea39e515a31e2719/staging/api/pkg/operators/v1alpha1/subscription_types.go#L17-L23
            if obj.status.state == nil  then
              numPending = numPending + 1
              msg = msg .. ".status.state not yet known\n"
            elseif obj.status.state == "" or obj.status.state == "UpgradeAvailable" or obj.status.state == "UpgradePending" then
              numPending = numPending + 1
              msg = msg .. ".status.state is '" .. obj.status.state .. "'\n"
            elseif obj.status.state == "UpgradeFailed" then
              numDegraded = numDegraded + 1
              msg = msg .. ".status.state is '" .. obj.status.state .. "'\n"
            else
              -- Last possiblity of .status.state: AtLatestKnown
              msg =  msg .. ".status.state is '" .. obj.status.state .. "'\n"
            end
        
            if numDegraded == 0 and numPending == 0 then
              health_status.status = "Healthy"
              health_status.message = msg
              return health_status
            elseif numPending > 0 and numDegraded == 0 then
              health_status.status = "Progressing"
              health_status.message = msg
              return health_status
            else
              health_status.status = "Degraded"
              health_status.message = msg
              return health_status
            end
          end
        end
        health_status.status = "Progressing"
        health_status.message = "An install plan for a subscription is pending installation"
        return health_status
    postgresql.cnpg.io/Cluster: 
      health.lua: |
        -- from: https://github.com/argoproj/argo-cd/blob/f4edcf7717940e44a141dadb5ca8c5fc11951cb2/resource_customizations/postgresql.cnpg.io/Cluster/health.lua
        local hs = {}

        local cnpgStatus = {
            ["Cluster in healthy state"] = "Healthy",
            ["Setting up primary"] = "Progressing",
            ["Setting up primary"] = "Progressing",
            ["Creating a new replica"] = "Progressing",
            ["Upgrading cluster"] = "Progressing",
            ["Waiting for the instances to become active"] = "Progressing",
            ["Promoting to primary cluster"] = "Progressing",
            ["Switchover in progress"] = "Degraded",
            ["Failing over"] = "Degraded",
            ["Upgrading Postgres major version"] = "Degraded",
            ["Cluster upgrade delayed"] = "Degraded",
            ["Waiting for user action"] = "Degraded",
            ["Primary instance is being restarted in-place"] = "Degraded",
            ["Primary instance is being restarted without a switchover"] = "Degraded",
            ["Cluster cannot execute instance online upgrade due to missing architecture binary"] = "Degraded",
            ["Online upgrade in progress"] = "Degraded",
            ["Applying configuration"] = "Degraded",
            ["Unable to create required cluster objects"] = "Suspended",
            ["Cluster cannot proceed to reconciliation due to an unknown plugin being required"] = "Suspended",
            ["Cluster has incomplete or invalid image catalog"] = "Suspended",
            ["Cluster is unrecoverable and needs manual intervention"] = "Suspended",
        }

        function hibernating(obj)
            for i, condition in pairs(obj.status.conditions) do
                if condition.type == "cnpg.io/hibernation" then
                    return condition
                end
            end
            return nil
        end

        if obj.status ~= nil and obj.status.conditions ~= nil then
            local hibernation = hibernating(obj)
            if hibernation ~= nil then
                if hibernation.status == "True" then
                    hs.status = "Suspended"
                    hs.message = hibernation.message
                    return hs
                else
                    hs.status = "Degraded"
                    hs.message = hibernation.message
                    return hs
                end
            end
            statusState = cnpgStatus[obj.status.phase]
            if statusState ~= nil then
                hs.status = statusState
                hs.message = obj.status.phaseReason
                return hs
            else
                hs.status = "Unknown"
                hs.message = obj.status.phaseReason
                return hs
            end
        end

        hs.status = "Progressing"
        hs.message = obj.status.phaseReason
        return hs